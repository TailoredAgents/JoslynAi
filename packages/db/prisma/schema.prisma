generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Minimal schema for Phase 1 vertical slice

model Children {
  id        String   @id @default(uuid()) @db.Uuid
  org_id    String?  @db.Uuid
  name      String
  slug      String?
  school_name String?
  dob       DateTime?
  created_at DateTime @default(now())

  @@unique([org_id, slug])

  @@map("children")
}

model Documents {
  id          String   @id @default(uuid()) @db.Uuid
  child_id    String   @db.Uuid
  org_id      String?  @db.Uuid
  type        String
  storage_uri String
  sha256      String
  doc_tags    Json
  original_name String?
  version     Int      @default(1)
  processed_at DateTime?
  created_at  DateTime @default(now())

  @@map("documents")
  @@index([org_id])
  @@index([child_id, type, created_at])
  @@index([child_id, type, version])
}

model DocSpan {
  id           String   @id @default(uuid()) @db.Uuid
  document_id  String   @db.Uuid
  org_id       String?  @db.Uuid
  page         Int
  // Prefer numeric bbox: [x, y, w, h] in page coordinates
  bbox         Float[] @default([])
  page_width   Float?
  page_height  Float?
  text         String
  created_at   DateTime @default(now())

  @@map("doc_spans")
  @@index([org_id])
  @@index([document_id, page])
}

model IepExtract {
  id                   String   @id @default(uuid()) @db.Uuid
  document_id          String   @unique @db.Uuid
  org_id               String?  @db.Uuid
  services_json        Json
  goals_json           Json
  accommodations_json  Json
  placement            String?
  start_date           DateTime?
  end_date             DateTime?
  notes                String?
  created_at           DateTime @default(now())

  @@map("iep_extract")
  @@index([org_id])
}

model iep_diffs {
  id                   String   @id @default(uuid()) @db.Uuid
  org_id               String?  @db.Uuid
  child_id             String
  latest_document_id   String
  previous_document_id String?
  diff_json            Json
  risk_flags_json      Json?
  citations_json       Json?
  status               String   @default("ready")
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt

  @@index([org_id, child_id])
  @@index([latest_document_id])
  @@unique([latest_document_id])
}

model recommendations {
  id                    String   @id @default(uuid()) @db.Uuid
  org_id                String?  @db.Uuid
  child_id              String
  source_kind           String   @default("auto")
  request_hash          String?
  recommendations_json  Json
  citations_json        Json?
  locale                String?  @default("en")
  status                String   @default("ready")
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt

  @@index([org_id, child_id])
  @@index([request_hash])
  @@unique([child_id, source_kind])
}

model denial_explanations {
  id               String   @id @default(uuid()) @db.Uuid
  org_id           String?  @db.Uuid
  child_id         String?
  eob_id           String? @unique
  document_id      String?
  explanation_json Json
  next_steps_json  Json?
  citations_json   Json?
  status           String   @default("ready")
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  @@index([org_id, child_id])
}

model goal_rewrites {
  id               String   @id @default(uuid()) @db.Uuid
  org_id           String?  @db.Uuid
  child_id         String?
  document_id      String?
  goal_identifier  String
  rubric_json      Json
  rewrite_json     Json
  citations_json   Json?
  status           String   @default("draft")
  confirmed_at     DateTime?
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  @@index([org_id, child_id])
  @@index([document_id])
  @@unique([child_id, goal_identifier])
}

model advocacy_outlines {
  id             String   @id @default(uuid()) @db.Uuid
  org_id         String?  @db.Uuid
  child_id       String?
  outline_kind   String   @default("mediation")
  outline_json   Json
  citations_json Json?
  status         String   @default("draft")
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  @@index([org_id, child_id, outline_kind])
}

model research_summaries {
  id             String   @id @default(uuid()) @db.Uuid
  org_id         String?  @db.Uuid
  document_id    String
  summary_json   Json
  glossary_json  Json?
  citations_json Json?
  reading_level  String?
  status         String   @default("ready")
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  @@unique([document_id])
  @@index([org_id])
}

model appeal_kits {
  id             String   @id @default(uuid()) @db.Uuid
  org_id         String?  @db.Uuid
  child_id       String?
  denial_id      String?
  status         String   @default("draft")
  deadline_date  DateTime?
  metadata_json  Json?
  checklist_json Json?
  citations_json Json?
  packet_uri     String?
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  @@index([org_id, child_id])
}

model appeal_kit_items {
  id             String   @id @default(uuid()) @db.Uuid
  org_id         String?  @db.Uuid
  appeal_kit_id  String
  kind           String
  status         String   @default("pending")
  payload_json   Json
  citations_json Json?
  order_index    Int      @default(0)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  @@index([appeal_kit_id, kind])
}

model one_pagers {
  id                 String   @id @default(uuid()) @db.Uuid
  org_id             String?  @db.Uuid
  child_id           String
  audience           String
  language_primary   String   @default("en")
  language_secondary String?
  content_json       Json
  citations_json     Json?
  status             String   @default("draft")
  share_link_id      String?
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt

  @@index([org_id, child_id, audience])
}

model safety_phrases {
  id            String   @id @default(uuid()) @db.Uuid
  org_id        String?  @db.Uuid
  tag           String
  contexts      String[] @default([])
  content_json  Json
  status        String   @default("active")
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  @@index([org_id, tag])
}

// Phase 2 additions

model timeline_rules {
  id            String   @id @default(uuid()) @db.Uuid
  jurisdiction  String
  kind          String
  delta_days    Int
  description   String?
  source_url    String?
  active        Boolean  @default(true)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  @@index([jurisdiction, kind])
  @@unique([jurisdiction, kind])
}

model deadlines {
  id            String   @id @default(uuid()) @db.Uuid
  child_id      String
  org_id        String?  @db.Uuid
  kind          String
  base_date     DateTime
  due_date      DateTime
  jurisdiction  String
  source_doc_id String?
  created_at    DateTime @default(now())

  @@index([org_id, child_id])
}

model letters {
  id          String   @id @default(uuid()) @db.Uuid
  child_id    String
  org_id      String?  @db.Uuid
  kind        String
  status      String   @default("draft")
  draft_json  Json
  pdf_uri     String?
  sent_via    String?
  sent_at     DateTime?
  created_at  DateTime @default(now())

  @@index([org_id, child_id])
}

model claims {
  id                   String   @id @default(uuid()) @db.Uuid
  child_id             String
  org_id               String?  @db.Uuid
  service_date         DateTime?
  provider             String?
  amounts_json         Json?
  status               String   @default("open")
  linked_document_ids  Json?
  created_at           DateTime @default(now())

  @@index([org_id, child_id])
}

model eobs {
  id             String   @id @default(uuid()) @db.Uuid
  claim_id       String
  document_id    String
  org_id         String?  @db.Uuid
  parsed_json    Json?
  explanation_text String?
  created_at     DateTime @default(now())

  @@unique([document_id])
  @@index([org_id])
}

model next_best_steps {
  id            String   @id @default(uuid()) @db.Uuid
  org_id        String?
  child_id      String
  kind          String
  payload_json  Json
  dedupe_key    String?
  suggested_at  DateTime @default(now())
  expires_at    DateTime?
  accepted_at   DateTime?
  dismissed_at  DateTime?

  @@unique([child_id, kind, dedupe_key])
}

model notifications {
  id            String   @id @default(uuid()) @db.Uuid
  org_id        String?
  user_id       String?
  kind          String
  payload_json  Json
  send_at       DateTime
  sent_at       DateTime?
  channel       String   @default("email")
  created_at    DateTime @default(now())
}

model copilot_conversations {
  id            String   @id @default(uuid()) @db.Uuid
  org_id        String?  @db.Uuid
  child_id      String   @unique
  messages_json Json
  artifacts_json Json?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  @@index([org_id])
}

model agent_runs {
  id            String   @id @default(uuid()) @db.Uuid
  org_id        String?
  user_id       String?
  child_id      String?
  intent        String
  inputs_json   Json
  outputs_json  Json
  tokens        Int      @default(0)
  cost_cents    Int      @default(0)
  route         String?
  feature       String?
  created_at    DateTime @default(now())
}

model entitlements {
  id            String   @id @default(uuid()) @db.Uuid
  org_id        String   @unique
  plan          String
  features_json Json
  created_at    DateTime @default(now())
}

model glossaries {
  id         String   @id @default(uuid()) @db.Uuid
  org_id     String
  terms_json Json
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([org_id])
}

model share_links {
  id               String   @id @default(uuid()) @db.Uuid
  org_id           String
  resource_type    String
  resource_subtype String? @default("default")
  resource_id      String
  token            String   @unique
  password_hash    String?
  meta_json        Json?
  expires_at       DateTime?
  created_at       DateTime @default(now())

  @@index([org_id, resource_type, resource_subtype])
}

model child_profile {
  id          String   @id @default(uuid()) @db.Uuid
  child_id    String   @unique @db.Uuid
  org_id      String?  @db.Uuid
  profile_json Json
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@index([org_id, child_id])
}

model events {
  id           String   @id @default(uuid()) @db.Uuid
  org_id       String?
  user_id      String?
  type         String
  payload_json Json
  created_at   DateTime @default(now())
}

model org_settings {
  id          String   @id @default(uuid()) @db.Uuid
  org_id      String   @unique
  retain_days Int      @default(365)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model orgs {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  created_at  DateTime @default(now())
}

model org_members {
  id        String   @id @default(uuid()) @db.Uuid
  org_id    String
  user_id   String
  role      String
  created_at DateTime @default(now())

  @@index([org_id, user_id])
}

model invites {
  id        String   @id @default(uuid()) @db.Uuid
  org_id    String
  email     String
  role      String
  token     String   @unique
  accepted_at DateTime?
  created_at DateTime @default(now())
}

// Phase 6 additions

model users {
  id         String   @id @default(uuid()) @db.Uuid
  email      String   @unique
  name       String?
  created_at DateTime @default(now())
}

model job_runs {
  id           String   @id @default(uuid()) @db.Uuid
  child_id     String
  org_id       String?  @db.Uuid
  type         String   // "upload" | "ocr" | "index" | "extract" | ... (current stage)
  status       String   // "pending" | "processing" | "done" | "failed"
  error_text   String?
  payload_json Json?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  @@index([child_id, created_at])
  @@index([org_id, child_id, created_at])
}
